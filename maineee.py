from fpdf import FPDF
from io import BytesIO
import requests
import tempfile  
import matplotlib.pyplot as plt
import numpy as np
import re
from fastapi import FastAPI, UploadFile, File
import openai
from pdf_reader import extract_text_from_pdf
import os
from dotenv import load_dotenv
from fastapi.responses import StreamingResponse
import altair as alt
import pandas as pd
from fastapi.responses import JSONResponse
from fastapi.responses import FileResponse
from fastapi.staticfiles import StaticFiles
from datetime import datetime
import json
import shutil
import zipfile
import io
import json
import re

load_dotenv()

openai.api_key = os.getenv("OPENAI_API_KEY")


app = FastAPI()
app.mount("/static", StaticFiles(directory="static"), name="static")

from urllib.parse import urlparse

def obtener_nombre_archivo_desde_url(url: str) -> str:
    """
    Extrae el nombre del archivo desde una URL.
    Ej: https://myworkinpe.lat/pdfs/cv_1744315148575_4af9adfd.pdf ‚Üí cv_1744315148575_4af9adfd.pdf
    """
    parsed_url = urlparse(url)
    return parsed_url.path.split("/")[-1]

def clean_and_load_json(response_str):
    # Elimina bloques de markdown como ```json ... ```
    cleaned = re.sub(r"```(?:json)?\n?", "", response_str.strip(), flags=re.IGNORECASE)
    cleaned = re.sub(r"```$", "", cleaned.strip())
    return json.loads(cleaned)

@app.get("/analizar-cv/")
async def analizar_cv(pdf_url: str, file_original: str, puesto_postular: str):
    
    response = requests.get(pdf_url)
    
    puesto = puesto_postular

    if response.status_code != 200:
        return {"error": "No se pudo descargar el archivo PDF."}
    
    pdf_content = BytesIO(response.content)

    contenido, num_paginas = extract_text_from_pdf(pdf_content)

    #  return JSONResponse(contenido)


    prompt1 = f"""
    Eres un reclutador profesional. Recibir√°s el perfil de un candidato en formato JSON y deber√°s evaluar su idoneidad para el puesto de "{puesto}".

    Eval√∫a cuidadosamente estos aspectos:
    - Experiencia laboral relevante para el puesto.
    - Habilidades t√©cnicas y blandas necesarias.
    - Formaci√≥n acad√©mica y complementaria alineada al rol.
    - Actitudes y aptitudes generales que favorezcan un buen desempe√±o en el puesto.

    Con base en tu an√°lisis, responde exclusivamente con un **objeto JSON** con la siguiente estructura:

    {{
        "porcentaje": n√∫mero entre 0 y 100, indicando qu√© tan alineado est√° el perfil con el puesto,
        "estado": una leyenda basada en el porcentaje, siguiendo esta escala:
            - 75 o m√°s: "Aprobado"
            - Entre 50 y 74: "Con potencial"
            - Menor a 50: "No aprobado",
        "analisis": un √∫nico p√°rrafo breve, que comience con "Tu CV", y que exprese una sola idea clara sobre el punto m√°s relevante del perfil (ya sea una fortaleza o una oportunidad de mejora)
    }}

    Ejemplo de salida v√°lida:

    {{
        "porcentaje": 78,
        "estado": "Aprobado",
        "analisis": "Tu CV demuestra actitud, base t√©cnica y experiencias que suman. Pero hoy describe tareas, no comunica
        impacto. Con ajustes en redacci√≥n, m√©tricas, lenguaje sectorial y presentaci√≥n, puedes convertir un perfil
        prometedor en uno competitivo."
    }}

    No incluyas ning√∫n otro texto fuera del JSON.

    A continuaci√≥n, el perfil del candidato:

    {contenido}
    """

    response1 = openai.ChatCompletion.create(
        model="gpt-3.5-turbo", 
        messages=[{"role": "user", "content": prompt1}],
        temperature=0.7,
       # max_tokens=100
    )
    mainly_analysis = response1['choices'][0]['message']['content']


    prompt2 = f"""
    Eres un reclutador senior con amplia experiencia en la evaluaci√≥n de curr√≠culums para procesos de selecci√≥n competitivos.

    Tu tarea es analizar √∫nicamente el n√∫mero de p√°ginas de un CV y emitir una evaluaci√≥n profesional, comenzando siempre con una frase clara de diagn√≥stico general.

    Primero debes comenzar el comentario con una de estas frases (elige seg√∫n el caso):
    - "¬°Tu CV tiene el tama√±o ideal!"
    - "Tu CV es demasiado extenso y puede jugar en contra."
    - "Tu CV tiene buen contenido, pero se puede optimizar en longitud."

    Luego, contin√∫a con una observaci√≥n m√°s desarrollada y fundamentada, teniendo en cuenta:
    - Si facilita o no una lectura √°gil por parte del reclutador.
    - Si permite resaltar la informaci√≥n clave.
    - Si sigue buenas pr√°cticas de presentaci√≥n ejecutiva (especialmente para perfiles no acad√©micos).

    Responde con un √∫nico objeto JSON que contenga:
    - `"paginas"`: el n√∫mero total de p√°ginas del CV (ya proporcionado).
    - `"comentario"`: la evaluaci√≥n clara y profesional, iniciando con una de las frases mencionadas y luego desarrollando una recomendaci√≥n breve pero experta.

    No incluyas ning√∫n texto fuera del JSON.

    N√∫mero de p√°ginas del CV: {num_paginas}
    """


    response2 = openai.ChatCompletion.create(
        model="gpt-3.5-turbo", 
        messages=[{"role": "user", "content": prompt2}],
        temperature=0.7,
       # max_tokens=100
    )
    pagination = response2['choices'][0]['message']['content']



    
    prompt3 = f"""
    Act√∫a como un corrector profesional de ortograf√≠a con experiencia en revisi√≥n de curr√≠culums (CVs).

    Analiza el siguiente texto y detecta √∫nicamente errores ortogr√°ficos reales.

    Debes ignorar lo siguiente:
    - Enlaces o URLs (por ejemplo: https://..., http://...).
    - Correos electr√≥nicos y nombres de usuario.
    - Nombres propios de personas, empresas, instituciones, pa√≠ses, etc.
    - Siglas y abreviaciones en may√∫sculas (como UX, TI, HTML).
    - Uso de may√∫sculas al inicio de oraci√≥n (no lo consideres error).

    Detecta √∫nicamente errores como:
    - Palabras mal escritas o con letras cambiadas.
    - Tildes mal colocadas o faltantes.
    - Errores ortogr√°ficos frecuentes (como "desarollo" en lugar de "desarrollo").

    Tu respuesta debe ser exclusivamente un JSON con la siguiente estructura:

    {{
    "errores": n√∫mero total de errores encontrados (entero),
    "comentario": comentario correspondiente seg√∫n cantidad de errores,
    "detalle_errores": si hay errores, una lista con objetos en el formato:
        [
        {{
            "original": "palabra con error",
            "sugerencia": "palabra corregida"
        }}
        ],
        si no hay errores, debe ser null
    }}

    Solo incluye en "detalle_errores" palabras donde "original" y "sugerencia" sean diferentes.

    No agregues texto fuera del JSON.

    Texto a analizar:
    \"\"\"{contenido}\"\"\"
    """


    response3 = openai.ChatCompletion.create(
        model="gpt-3.5-turbo", 
        messages=[{"role": "user", "content": prompt3}],
        temperature=0.7,
        #max_tokens=50  
    )
    
    spelling = response3['choices'][0]['message']['content']

    #filename = obtener_nombre_archivo_desde_url(pdf_url)
   
    filename = file_original
    print("FILENAME",file_original)
    filename_json = json.dumps(filename)
    contenido_json = json.dumps(contenido)

    prompt4 = f"""Eres un experto en marca personal y empleabilidad. Tu tarea es analizar el nombre del archivo de un curr√≠culum (CV) para determinar si es profesional.

    Eval√∫a √∫nicamente el **nombre del archivo PDF**: {filename_json}

    Considera si:
    - Es f√°cil de identificar por el reclutador.
    - Contiene el nombre del candidato o al menos algo representativo.
    - Evita combinaciones de n√∫meros aleatorios o palabras gen√©ricas.
    - Transmite orden y seriedad profesional.

    Considera este contenido del CV: {contenido_json}

    Responde SOLO en JSON con esta estructura:

    {{
    "archivo": {filename_json},
    "comentario": "Dime si es adecuado o no, por qu√©, y sugiere un nombre m√°s profesional si aplica."
    }}
    """



    response4 = openai.ChatCompletion.create(
        model="gpt-3.5-turbo",
        messages=[{"role": "user", "content": prompt4}],
        temperature=0.7,
        #max_tokens=50
    )
    filename_response = response4['choices'][0]['message']['content']

    print("filename_response", filename_response)

    prompt5 = f"""
    Act√∫a como un reclutador profesional experto en evaluaci√≥n de curr√≠culums.

    Analiza si los siguientes elementos clave est√°n presentes, bien ubicados y son f√°cilmente identificables en el CV:

    - Nombre
    - Correo electr√≥nico
    - Experiencia laboral
    - Formaci√≥n acad√©mica

    Responde en formato JSON con:

    - "evaluacion": una lista de objetos, uno por cada elemento, con las siguientes claves:
    - "elemento": el nombre del campo evaluado
    - "existe": true o false
    - "bien_posicionado": true o false
    - "facil_de_distinguir": true o false

    - "comentario_general": una conclusi√≥n clara y profesional de m√≠nimo 25 palabras sobre la presentaci√≥n general de estos elementos. Eval√∫a si son suficientes, si est√°n bien organizados o si requieren mejoras para facilitar la lectura y comprensi√≥n del CV.

    No a√±adas ning√∫n texto fuera del JSON.

    Texto del CV:
    \"\"\"{contenido}\"\"\"
    """

    response5 = openai.ChatCompletion.create(
        model="gpt-3.5-turbo", 
        messages=[{"role": "user", "content": prompt5}],
        temperature=0.7,
        #max_tokens=50  
    )

    indispensable = response5['choices'][0]['message']['content']

    prompt6 = f"""
    Act√∫a como un revisor profesional de CVs. Tu tarea es detectar √∫nicamente **palabras que se repiten de forma innecesaria o excesiva** en el siguiente texto.

    üîç **Ignora las siguientes categor√≠as de palabras**:
    - Art√≠culos: el, la, los, las, un, una, unos, unas
    - Preposiciones: de, en, con, por, para, sobre, entre, hasta, hacia, desde
    - Conjunciones y conectores: y, o, u, pero, aunque, sino, mientras, as√≠, entonces
    - Pronombres comunes: yo, t√∫, √©l, ella, nosotros, ustedes, ellos
    - Verbos muy comunes: ser, estar, haber, tener, hacer (solo si no est√°n en exceso)
    - Monos√≠labos vac√≠os de contenido: a, e, es, al, lo, s√≠, no, se, que, qu√©, ya, m√°s
    - Palabras similares con diferencia de g√©nero o n√∫mero (ej: "capacidad" y "capacidades" se cuentan como una sola)

    üì§ Devuelve **solo** un JSON con esta estructura:

    {{ 
    "palabras_repetidas": [
        {{ "palabra": "x", "veces": n }},
    ]
    }}

    No incluyas ning√∫n texto fuera del JSON.

    Texto a revisar:
    \"\"\"{contenido}\"\"\"
    """


    response6 = openai.ChatCompletion.create(
        model="gpt-3.5-turbo", 
        messages=[{"role": "user", "content": prompt6}],
        temperature=0.7,
        #max_tokens=50  
    )

    repeat_words = response6['choices'][0]['message']['content']

    prompt7 = f"""
    Imagina que eres un revisor de curr√≠culums con experiencia en selecci√≥n de personal. Tu tarea es revisar el CV de una persona que postula al siguiente cargo: **{puesto_postular}**.

    Tu objetivo es dar una **opini√≥n profesional y cercana** sobre si la experiencia laboral de la persona est√° **vigente** y si **realmente aporta valor para el puesto al que postula**.

    Habla de t√∫ a t√∫, como si dieras una recomendaci√≥n directa al candidato. Usa un **solo p√°rrafo**, en tono natural (sin parecer una IA ni usar lenguaje t√©cnico innecesario).

    Eval√∫a:
    - Si la experiencia es reciente (√∫ltimos 10-15 a√±os).
    - Si est√° alineada al cargo o al tipo de trabajo que se espera.
    - Si hay continuidad profesional o vac√≠os laborales importantes.
    - No comentes sobre estudios, habilidades o redacci√≥n.

    Ejemplos del tono esperado:
    - "Veo que tu experiencia reciente en atenci√≥n al cliente encaja bien con lo que se busca en este puesto, aunque te recomiendo resaltar m√°s logros concretos."
    - "Has trabajado hace tiempo en roles similares, pero ser√≠a ideal actualizar tu experiencia con algo m√°s reciente para estar al d√≠a con lo que el mercado pide."
    - "Tuviste un rol interesante en log√≠stica hace unos a√±os, pero hay un vac√≠o importante desde entonces; te recomiendo explicar eso para evitar dudas."

    Texto del CV:
    \"\"\"{contenido}\"\"\"
    """


    response7 = openai.ChatCompletion.create(
        model="gpt-3.5-turbo", 
        messages=[{"role": "user", "content": prompt7}],
        temperature=0.7,
        #max_tokens=50  
    )
    relevance = response7['choices'][0]['message']['content']

    prompt8 = f"""
    Act√∫a como un reclutador profesional. Eval√∫a el uso de verbos de impacto en el siguiente curr√≠culum.

    Analiza:
    - Si el candidato usa verbos fuertes que transmiten logros, liderazgo o resultados (por ejemplo: lider√©, optimic√©, implement√©).
    - Si los verbos son gen√©ricos o poco potentes (como: ayud√©, colabor√©, realic√©).
    - Si hay variedad o repetici√≥n.

    Devuelve un JSON con la siguiente estructura:

    - "nivel": un n√∫mero entero del 1 al 10, donde 10 representa un uso excelente de verbos de impacto.
    - "comentario": una observaci√≥n profesional breve y clara, de aproximadamente 160 caracteres (no m√°s de 180). Usa un estilo formal, sin emojis.
    - "sugerencias": una lista de 3 sugerencias espec√≠ficas para mejorar los verbos en la redacci√≥n del CV. Cada sugerencia debe tener al menos 20 palabras y explicar claramente c√≥mo mejorar un verbo gen√©rico o repetido, incluyendo un ejemplo concreto de reemplazo.

    No incluyas ning√∫n texto fuera del JSON.

    Texto del CV:
    \"\"\"{contenido}\"\"\"
    """


    response8 = openai.ChatCompletion.create(
        model="gpt-3.5-turbo", 
        messages=[{"role": "user", "content": prompt8}],
        temperature=0.7,
        #max_tokens=50  
    )
    verbos_impact = response8['choices'][0]['message']['content']


    prompt9 = f"""
    Act√∫a como un experto en redacci√≥n de curr√≠culums. Analiza √∫nicamente el primer p√°rrafo del perfil profesional que aparece a continuaci√≥n. 

    Ignora encabezados como ‚ÄúPerfil Profesional‚Äù, as√≠ como correos, tel√©fonos, links u otros datos de contacto. No incluyas esa informaci√≥n en el resultado.

    Tu objetivo es evaluar la redacci√≥n del texto actual y sugerir una versi√≥n mejorada que sea m√°s clara, profesional y alineada con est√°ndares actuales. Mant√©n un tono formal, positivo y directo.

    Devuelve solo un JSON con esta estructura:

    {{
    "actual": "Texto actual del primer p√°rrafo, sin encabezados ni contactos.",
    "recomendado": "Texto recomendado, redactado de forma m√°s clara y profesional."
    }}

    Texto del perfil:
    \"\"\"{contenido}\"\"\"
    """


    response9 = openai.ChatCompletion.create(
        model="gpt-3.5-turbo", 
        messages=[{"role": "user", "content": prompt9}],
        temperature=0.7,
        #max_tokens=50  
    )
    perfil_profesional = response9['choices'][0]['message']['content']


    prompt10 = f"""
    Act√∫a como un reclutador experto en selecci√≥n de personal para el rol de {puesto}. Eval√∫a el contenido del siguiente CV y clasif√≠calo en las siguientes categor√≠as:

    - Habilidades de an√°lisis
    - Resultados cuantificables
    - Habilidades blandas
    - Lenguaje t√©cnico

    Para cada categor√≠a proporciona:
    1. Un nivel: Bajo, Medio o Alto.
    2. Una acci√≥n concreta para mejorar: debe ser breve, pr√°ctica y de aplicaci√≥n inmediata. Si es posible, sugiere reemplazos espec√≠ficos en el formato: ‚Äúcambiar #X# por #Y#‚Äù.

    Formato de salida JSON con claves en snake_case. No a√±adas explicaciones ni texto adicional fuera del JSON.

    Contenido del CV:
    \"\"\"{contenido}\"\"\"
    """

    response10 = openai.ChatCompletion.create(
        model="gpt-3.5-turbo", 
        messages=[{"role": "user", "content": prompt10}],
        temperature=0.7,
        #max_tokens=50  
    )
    ajuste_puesto = response10['choices'][0]['message']['content']
    try:
        ajuste_puesto_json = clean_and_load_json(ajuste_puesto)
    except json.JSONDecodeError as e:
        print("Error al decodificar JSON:", e)
        ajuste_puesto_json = None
    print(ajuste_puesto_json)


    prompt11 = f"""
    Brinda sugerencias personalizadas de mejora por secci√≥n del CV, orientadas al rol de {puesto}.

    En esta parte, cubre lo siguiente:

    - En "Empresa" indica el nombre de la empresa tal como aparece en el CV.
    - En "Actual" incluye el texto completo de la experiencia laboral tal como figura en el CV.
    - En "Recomendado" proporciona una versi√≥n mejorada del texto de experiencia laboral, aplicando lo siguiente:
        - Iniciar con un verbo de acci√≥n fuerte.
        - Incluir resultados cuantificables si aplica.
        - Alinear con las funciones o competencias clave para el rol de {puesto}.
        - Usa el contenido original como base y mej√≥ralo directamente. No inventes logros no mencionados.
        - Mant√©n el mismo contenido, solo mejora redacci√≥n, impacto y claridad.

    Devu√©lveme solo un JSON con el siguiente formato:

    [
    {{
        "Empresa": "Nombre de la empresa",
        "Actual": "Texto original tal como aparece en el CV.",
        "Recomendado": "Texto mejorado aplicando verbos de impacto, claridad y orientaci√≥n al puesto de {puesto}."
    }},
    {{
        "Empresa": "Nombre de la empresa",
        "Actual": "Texto original tal como aparece en el CV.",
        "Recomendado": "Texto mejorado aplicando verbos de impacto, claridad y orientaci√≥n al puesto de {puesto}."
    }}
    ]

        Solo analiza la secci√≥n de experiencia laboral.
        No incluyas encabezados, datos de contacto ni formaci√≥n acad√©mica.
        No agregues explicaciones fuera del JSON.
        Toda la informaci√≥n debe basarse √∫nicamente en el contenido proporcionado a continuaci√≥n:
        \"\"\"{contenido}\"\"\"
    """

    response11 = openai.ChatCompletion.create(
        model="gpt-3.5-turbo", 
        messages=[{"role": "user", "content": prompt11}],
        temperature=0.7,
        #max_tokens=50  
    )
    experiencia_laboral = response11['choices'][0]['message']['content'].strip()

    prompt12 = f"""
    Act√∫a como un experto en reclutamiento y redacci√≥n de curr√≠culums (CVs), con experiencia en m√∫ltiples industrias y perfiles profesionales.

    Analiza el siguiente contenido extra√≠do de un CV:

    \"\"\"{contenido}\"\"\"

    El puesto objetivo del candidato es: **{puesto}**

    Tu tarea es:
    1. Identificar la secci√≥n relacionada con habilidades t√©cnicas, herramientas, conocimientos t√©cnicos o espec√≠ficos del perfil (ej. software, metodolog√≠as, idiomas, maquinaria, plataformas, etc.).
    2. Evaluar si esta secci√≥n est√° bien redactada, clara, agrupada correctamente y alineada con el perfil profesional del puesto objetivo (**{puesto}**).
    3. Brindar un conjunto de recomendaciones √∫tiles para mejorar esa secci√≥n con el fin de hacerla m√°s atractiva y profesional para un reclutador en ese campo.

    Las recomendaciones pueden incluir:
    - C√≥mo agrupar las herramientas o habilidades de forma m√°s clara y l√≥gica (por categor√≠as, niveles de dominio, frecuencia de uso, etc.).
    - C√≥mo mejorar la redacci√≥n para evitar repeticiones, ambig√ºedades o estructuras confusas.
    - Qu√© tipo de habilidades podr√≠an estar faltando seg√∫n el rol (sin inventar, pero con sugerencias realistas).
    - C√≥mo posicionar esa secci√≥n en el CV (ej. destacarla si es muy relevante para el rol).
    - Sugerencias de orden (ej. por prioridad, nivel de experiencia o herramientas m√°s demandadas).
    - Qu√© evitar (exceso de herramientas irrelevantes o tecnol√≥gicamente obsoletas).

    Tu respuesta debe ser exclusivamente en formato JSON, con la siguiente estructura:

    {{
    "recomendaciones": [
        "Primera recomendaci√≥n clara y espec√≠fica.",
        "Segunda recomendaci√≥n relevante y alineada al rol {puesto}.",
        "... (tantas como correspondan, m√≠nimo 3 si es posible)"
    ]
    }}

    """

    response12 = openai.ChatCompletion.create(
        model="gpt-3.5-turbo",
        messages=[{"role": "user", "content": prompt12}],
        temperature=0.7,
        #max_tokens=50
    )

    habilidades_herramientas = response12['choices'][0]['message']['content'].strip()

    prompt13 = f"""
    Analiza el siguiente CV y enf√≥cate exclusivamente en la secci√≥n de educaci√≥n o formaci√≥n acad√©mica.

    Genera un array de recomendaciones generales en formato JSON. Estas recomendaciones deben:

    - Ser √∫tiles y aplicables para mejorar la presentaci√≥n y claridad de la formaci√≥n acad√©mica.
    - Se√±alar aspectos como: agregar fechas si faltan, detallar el grado obtenido, evitar abreviaciones poco claras, incluir logros destacados si los hay, o mejorar la alineaci√≥n con el perfil requerido para el puesto de {puesto}.
    - Cada recomendaci√≥n debe tener al menos 20 palabras.
    - No inventes informaci√≥n no presente en el CV.
    - Si no hay una secci√≥n de educaci√≥n/formaci√≥n acad√©mica en el CV, incluye una √∫nica recomendaci√≥n indicando que dicha secci√≥n no fue encontrada.

    Analiza este contenido:

    \"\"\"{contenido}\"\"\"

    Devuelve solo el JSON con este formato:

    [
    "Recomendaci√≥n 1...",
    "Recomendaci√≥n 2...",
    ...
    ]
    """

    response13 = openai.ChatCompletion.create(
        model="gpt-3.5-turbo", 
        messages=[{"role": "user", "content": prompt13}],
        temperature=0.7,
        #max_tokens=50  
    )
    educacion = response13['choices'][0]['message']['content']


    prompt14= f"""
    Analiza el siguiente CV y detecta si hay una secci√≥n de voluntariado.
    Sino encuentras la secci√≥n de voluntariado, responde con un JSON indicando que no se encontr√≥. SE MUY ESPECIFICO Y NO INVENTES INFORMACI√ìN. NI LA CONFUNDAS CON EXPERIENCIA LABORAL. SE LITERALMENTE ESPECIFICO CON "VOLUNTARIADO".

    Si existe, por cada experiencia encontrada devuelve:

    - "Organizaci√≥n": nombre de la instituci√≥n u organizaci√≥n.
    - "Actual": texto original tal como aparece en el CV.
    - "Recomendado": versi√≥n mejorada del texto, manteniendo la experiencia pero:
        - Iniciando con un verbo de acci√≥n potente.
        - Destacando logros, impacto o habilidades desarrolladas.
        - Enfocando el texto en competencias alineadas al rol de {puesto}.
        - Sin inventar contenido no presente en el CV.

    Si **no se encuentra** una secci√≥n de voluntariado, responde igualmente con un JSON en este formato:

    [
    {{
        "Organizaci√≥n": null,
        "Actual": null,
        "Recomendado": "No se encontr√≥ una secci√≥n de voluntariado en el CV."
    }}
    ]

    Todo el an√°lisis se basa √∫nicamente en el contenido proporcionado a continuaci√≥n:

    \"\"\"{contenido}\"\"\"

    No incluyas texto fuera del JSON.
    """
    response14 = openai.ChatCompletion.create(
        model="gpt-3.5-turbo", 
        messages=[{"role": "user", "content": prompt14}],
        temperature=0.7,
        #max_tokens=50  
    )
    voluntariado = response14['choices'][0]['message']['content']
    try:
        voluntariado_json = clean_and_load_json(voluntariado)
    except json.JSONDecodeError as e:
        print("Error al decodificar JSON:", e)
        voluntariado_json = None


    prompt15 = f"""
    Act√∫a como un experto en revisi√≥n profesional de curr√≠culums (CVs), con √©nfasis en formato, claridad y atracci√≥n para reclutadores.

    Eval√∫a el siguiente contenido extra√≠do de un CV:

    \"\"\"{contenido}\"\"\"

    El rol objetivo es: **{puesto}**

    Tu tarea es analizar el formato del CV con base en los siguientes criterios, orientados a mejorar su presentaci√≥n y efectividad:

    1. **Longitud**: Eval√∫a si el CV excede 1 p√°gina (en perfiles junior o intermedios) o si es innecesariamente largo para el rol. el num de paginas es {num_paginas} . recuerda que un CV debe ser conciso y f√°cil de leer. si es 1 hoja el estado es "Alto", si es 2 hojas "Medio" y si es m√°s de 2 "Bajo".

    2. **Foto**: Verifica si el CV incluye una foto. La mayor√≠a de los filtros autom√°ticos de RRHH no lo recomiendan, especialmente en pa√≠ses donde se evita por sesgos. ENtonces, si hay foto el estado es "Bajo", si no hay foto el estado es "Alto". 
    
    3. **Palabras clave**: Eval√∫a si incluye t√©rminos relevantes al puesto, como tecnolog√≠as, habilidades t√©cnicas, o conceptos espec√≠ficos (por ejemplo, en el caso de {puesto}, busca t√©rminos como: an√°lisis de riesgo, scoring, producto financiero, gesti√≥n, liderazgo, procesos, herramientas, etc.).
    4. **Verbos de impacto**: Eval√∫a si se utilizan verbos potentes y orientados a resultados, como: "lider√©", "implement√©", "optimiz√©", "logr√©", en lugar de verbos vagos o pasivos como "encargado de", "apoy√©", "particip√©".

    Para cada uno de estos 4 criterios, responde con:

    - `"estado"`: Puede ser **"Alto"**, **"Medio"** o **"Bajo"**, seg√∫n la calidad o presencia del elemento.
    - `"sugerencia"`: Breve texto con una recomendaci√≥n concreta para mejorar o justificar la evaluaci√≥n.

    Devuelve exclusivamente un JSON con el siguiente formato:

    {{
    "longitud": {{
        "estado": "",
        "sugerencia": ""
    }},
    "foto": {{
        "estado": "",
        "sugerencia": ""
    }},
    "palabras_clave": {{
        "estado": "",
        "sugerencia": ""
    }},
    "verbos_de_impacto": {{
        "estado": "",
        "sugerencia": ""
    }}
    }}
    """
    response15 = openai.ChatCompletion.create(
        model="gpt-3.5-turbo", 
        messages=[{"role": "user", "content": prompt15}],
        temperature=0.7,
        #max_tokens=50  
    )
    formato_optimizacion = response15['choices'][0]['message']['content']

    return JSONResponse(content={
        # 1 Analisis Principal
        "mainly_analysis": json.loads(mainly_analysis),
        # 2 Tama√±o del CV
        "pagination": json.loads(pagination),
        # 3 Ortograf√≠a
        "spelling": json.loads(spelling),
        # 4 Nombre del archivo
        "filename": json.loads(filename_response),
        # 5 Indispensables
        "indispensable": json.loads(indispensable),
        # 6 Palabras repetidas
        "repeat_words": json.loads(repeat_words),
        # 7 Relevancia de la experiencia
        "relevance": relevance,
        # 8 Verbos de impacto
        "verbos_impact": json.loads(verbos_impact),
        # 9 Perfil Profesional
        "perfil_profesional": json.loads(perfil_profesional),
        # 10 Ajuste al puesto
        "ajuste_puesto": ajuste_puesto_json,
        # 11 Experiencia laboral
        "experiencia_laboral": json.loads(experiencia_laboral),
        # 12 Habilidades y Herramientas
        "habilidades_herramientas": json.loads(habilidades_herramientas)['recomendaciones'],
        # 13 Educaci√≥n
        "educacion": json.loads(educacion),
        # 14 Voluntariado
        "voluntariado": voluntariado_json,
        # 15 Formato y Optimizaci√≥n del CV
        "formato-optimizacion": json.loads(formato_optimizacion)
    })